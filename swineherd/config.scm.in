; SPDX-FileCopyrightText: 2023 Ricardo Wurmus <rekado@elephly.net>
;
; SPDX-License-Identifier: GPL-3.0-or-later

(define-module (swineherd config)
  #:use-module (ice-9 match)
  #:use-module (config)
  #:use-module (config api)
  #:export (config
            %config
            %version
            %version-major
            %version-minor
            %version-patch))

(define %version "@VERSION@")
(define %version-parts
  (map string->number (string-split %version #\.)))
(define (%version-part part)
  (match %version-parts
    ((major minor patch)
     (match part
       ('major major)
       ('minor minor)
       ('patch patch)
       (_ #f)))
    (_ #f)))
(define %version-major (%version-part 'major))
(define %version-minor (%version-part 'minor))
(define %version-patch (%version-part 'patch))

(define config
  (configuration
   (name 'swineherd)
   (synopsis "The root configuration for swineherd")
   (keywords
    (list
     (switch
      (name 'netns-run-directory)
      (character #false)
      (synopsis "Location of the netns directory")
      (example "/var/run/netns")
      (default "/var/run/netns"))
     (switch
      (name 'socket-file)
      (character #false)
      (synopsis "Location of the shepherd socket file")
      (example "/run/swineherd.sock")
      (default "/run/swineherd.sock"))
     (switch
      (name 'container-root)
      (character #false)
      (synopsis "Location of the mounted btrfs root volume")
      (example "/path/to/container-root")
      (default
        ;; Try to find the directory relative to the executable first.
        ;; This is useful when using "pre-inst-env".
        (let ((maybe-dir
               (string-append (getcwd) "/container-root")))
          (or (and (getenv "SWINEHERD_UNINSTALLED")
                   (file-exists? maybe-dir)
                   maybe-dir)
              "@localstatedir@/lib/swineherd/container-root"))))
     (switch
      (name 'btrfs)
      (character #false)
      (synopsis "Command to use for the btrfs command line tool.")
      (example "/run/current-system/profile/bin/btrfs")
      (default "@BTRFS@"))
     (switch
      (name 'permitted-host-command-prefix)
      (character #false)
      (synopsis "Prefix of commands that may be executed from the host
on the containers' root file system.")
      (example "/allowed-host-commands/bin/")
      (default #false)
      (test (lambda (value) (or (not value) (string? value)))))))
   (subcommands
    (list
     (configuration
      (name 'api-server)
      (synopsis "Start the admin API server")
      (description
       "This command starts an API web server.  It is used to spawn,
configure, and terminate virtual machines on the same shared host.")
      (keywords
       (list
        (switch
         (name 'host)
         (synopsis "Host name on which to listen for connections")
         (character #\H)
         (default "localhost"))
        (switch
         (name 'port)
         (synopsis "Port on which to listen for connections")
         (character #\p)
         (default 1111)
         (test integer?)
         (handler string->number))
        (switch
         (name 'permitted-command-prefix)
         (character #false)
         (synopsis "Prefix of commands that may be executed in containers
through the HTTP API.")
         (example "/allowed-commands/bin/")
         (default #false)
         (test (lambda (value) (or (not value) (string? value)))))
        (switch
         (name 'guix)
         (character #false)
         (synopsis "Command to use for the guix command line tool.")
         (example "/run/current-system/profile/bin/guix")
         (default "/run/current-system/profile/bin/guix"))
        (switch
         (name 'herd)
         (character #false)
         (synopsis "Command to use for the herd command line tool.")
         (example "/run/current-system/profile/bin/herd")
         (default "@HERD@"))))
      ;; All of these are needed because any newly created container
      ;; service accesses them.  These settings are not "stored" in
      ;; the swineherd service and are looked up by each service
      ;; independently.
      (wanted '((keywords . (btrfs
                             container-root
                             permitted-host-command-prefix
                             socket-file
                             netns-run-directory)))))))
   (copyright '(2023))
   (author "Ricardo Wurmus")))

;; This is useful for REPL sessions where %config is not initialized
;; from the command line.
(define defaults
  (getopt-config (list "swineherd") config))

(define %config
  (let ((codex defaults))
    (match-lambda
      ('guile "@GUILE@")
      ((? codex? options)
       (set! codex options)
       #t)
      (key (option-ref codex key)))))
